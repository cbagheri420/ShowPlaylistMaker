import { NextRequest, NextResponse } from "next/server";
import { getServerSession } from "next-auth/next";
import { authOptions } from "../auth/[...nextauth]/route";

export async function POST(request: NextRequest) {
  const session = await getServerSession(authOptions);

  if (!session || !session.accessToken) {
    return NextResponse.json(
      { error: "Authentication required" },
      { status: 401 }
    );
  }

  try {
    const { tracks, showName } = await request.json();

    if (!tracks || !tracks.length || !showName) {
      return NextResponse.json(
        { error: "Tracks and show name are required" },
        { status: 400 }
      );
    }

    // Get the user's Spotify ID
    const userResponse = await fetch("https://api.spotify.com/v1/me", {
      headers: {
        Authorization: `Bearer ${session.accessToken}`,
      },
    });

    if (!userResponse.ok) {
      throw new Error(
        `Spotify API responded with status: ${userResponse.status}`
      );
    }

    const userData = await userResponse.json();
    const userId = userData.id;

    // Create a new playlist
    const playlistResponse = await fetch(
      `https://api.spotify.com/v1/users/${userId}/playlists`,
      {
        method: "POST",
        headers: {
          Authorization: `Bearer ${session.accessToken}`,
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: `${showName} Soundtrack`,
          description: `A custom soundtrack for ${showName}, generated by ShowTunes.`,
          public: true,
        }),
      }
    );

    if (!playlistResponse.ok) {
      throw new Error(
        `Spotify API responded with status: ${playlistResponse.status}`
      );
    }

    const playlistData = await playlistResponse.json();
    const playlistId = playlistData.id;

    // Add tracks to the playlist
    const trackUris = tracks.map((track) => track.uri);

    const addTracksResponse = await fetch(
      `https://api.spotify.com/v1/playlists/${playlistId}/tracks`,
      {
        method: "POST",
        headers: {
          Authorization: `Bearer ${session.accessToken}`,
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          uris: trackUris,
        }),
      }
    );

    if (!addTracksResponse.ok) {
      throw new Error(
        `Spotify API responded with status: ${addTracksResponse.status}`
      );
    }

    return NextResponse.json({
      success: true,
      playlistId,
      playlistUrl: playlistData.external_urls.spotify,
    });
  } catch (error) {
    console.error("Error saving playlist to Spotify:", error);
    return NextResponse.json(
      { error: "Failed to save playlist" },
      { status: 500 }
    );
  }
}
